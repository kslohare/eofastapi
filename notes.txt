
------------------------------------------ Miscellenious ----------------------------------------------------------

>>>pycharm
# To setup Local interpreter
In Pychar IDE, right bottom, click on Python Interpreter and then set from your virtual evironment instead of system one.


>>>>how_to_most_of_the_course
1) Watch all the videos
2) Take the excercises
3) Search and Practise
4) Ask Questions
5) Talk with friends


------------------------------------------ Basic ----------------------------------------------------------
>>>python command
python [-bBdEhiIOqsSuvVWx?] [-c command | -m module-name | script | - ] [args]
where
-m <module-name>
Search sys.path for the named module and execute its contents as the __main__ module.

>>>requirements.txt:
Is a file that contains a list of packages or libraries needed to work on a project that can all be installed with the file. It provides a consistent environment and makes collaboration easier.

>>>pip command
python -m pip install [options] <requirement specifier> [package-index-options] ...
python -m pip install [options] -r <requirements file> [package-index-options] ...
where,
-r, --requirement <file>
Install from the given requirements file

>>>Difference between pip freeze and pip list ?
pip freeze is used to generate a list of packages and their specific versions installed in a virtual environment, whereas
pip list displays a list of packages and their installation status.

>>>virtual enviornent
A Virtual environment is a Python Environment that is isolated from  those in other python environments.
1) First create project folder sya fastapi

2) Creation of virtual environments is done by executing the command venv:
cd fastapi
python -m venv /path/to/new/virtual/environment
Example:
python -m venv fastapivenv

3) Command to activate virtual environment
$ source <venv>/bin/activate
source fastapivenv/bin/activate

4) Verify what is installed till time
pip list

5) to deactivate virual envirnment
deactivate


>>>how to make python package- pip
1) Generate requireents file
pip freez - dont use it
To find out to get only used package run below command
pip3 installs pipreqs
pipreqs . # This will search what package needs and which dependcy used.
This will generated requirements.txt file
OR
pip3 freeze > requirements.txt

2) setup.py file


>>>pip install your script
1) Create login credential at pypy site.
2) Build the distribution using - python3 setup.py bdist_wheel
This will create build, dist and .egg-info folders
3)
First, increase the version from file setup.py
Second,update readme.md file under section ##history, the version and its updates details
4) use twine - tool to upload package to pypy
pip3 install twine
python3 -m twine upload dist/* --skil-existin


>>>stackedit.io for writin Readme.md

>>>Deploying on cloud
Check in code in git repository
pip3 freeze > requirements.txt
pip install -r requirements.txt
uvicorn main:app --reload
Where,
main 		-	is main.py having fastAPI instalnce
--reload   	-	Enable auto-reload.
# Hit on browser for api end point calling and swagger doc
http://127.0.0.1:8000/
http://localhost:8000/docs


------------------------------------------ fastapi ----------------------------------------------------------
Python web framework for builidng modern RESTFUL APIs.
# Official documentation
https://fastapi.tiangolo.com/

# HTTP Request Methods
CRUD	-	HTTP Request Methods
Create	-	POST
Read	-	GET
Update	-	PUT
Delete	-	DELETE

# Path Parameters - are reqeust parameters that have been attached to the URL.
Path parameters are variable elements of a URL that you use to identify a specific resource in a collection. This allows you to send an API call that refers to a specific resource, rather than a collection of resources. Where an endpoint accepts a path parameter, it is denoted in its URL between a pair of braces {}. For example, /users/{userId} indicates that the endpoint accepts a path parameter called userId. When you make an API call, you replace the braces and the placeholder inside the braces with the value you want to refer to.
Example:If you want to refer to a user with a userId of "20", the request URL would be /users/20.
-- Dynamic parameters - Order matterns

# Query Parameters
Query Parameters are reqeust parameters that have been attached after a "?".
QP have name=value pairs
Example:
120.0.0.1:80000/books/?category=math
QP can be used with path parameters


# POST request Method
- used to create data
- POST can have body that has additional information that GET does not have
- Components of a POST Request Method:

1) URL/Endpoint: The URL (Uniform Resource Locator) or endpoint specifies the server location where the POST request is sent. It identifies the specific resource or action that the server should handle. It acts as a unique address for accessing a particular web page, service, or API endpoint.

2) Request Method: The request method indicates the type of action being performed on the server. In the case of a POST request, it signifies that data is being submitted to the server to create or update a resource. Other common request methods include GET (retrieving data), PUT (updating data), and DELETE (removing data).

3) Request Header: The request header contains additional information about the request. It includes metadata and instructions for the server, such as the content type being sent, character encoding, authentication credentials, and details related to caching, language preferences, or user agents.

4) Request Body: The request body carries the actual data being sent in the POST request. It contains the payload or content that needs to be processed by the server. This can include form data, JSON, XML, or other structured data formats. The request body is where the relevant data is placed for the server to process and take appropriate actions.

5) Response: The response is the server's reply to the client's request. It contains the result of the requested action, including status information, data from the server (if applicable), and additional metadata. The response allows the client to understand the outcome of the request and handle it accordingly.

6) Content-Length: A header field that specifies the length or size of the request body in bytes. It helps the server know the size of the incoming data.

7) Authentication: If the server requires authentication, the POST request may need to include credentials or tokens in the headers or body to authenticate the client making the request.

Here's an example that includes all the components of a POST request in a single example:
POST /api/users HTTP/1.1
Host: api.example.com
Content-Type: application/json
Authorization: Bearer <access_token>
User-Agent: MyClient/1.0
Content-Length: 64

{
  "name": "John Doe",
  "email": "johndoe@example.com",
  "age": 30
}

In this example:
The request method is POST.
The request URI is /api/users.
The HTTP version is HTTP/1.1.
The Host header specifies the host or domain of the server (api.example.com in this case).
The Content-Type header indicates that the request body is in JSON format.
The Authorization header contains the access token for authentication.
The User-Agent header identifies the client making the request.
The Content-Length header specifies the length of the request body in bytes.
The request body contains the user data in JSON format.
These components together form a complete example of a POST request, which can be sent to the server to create a new user or perform other operations as per the API's specifications.


# PUT request Method
- Used to update data
- PUT can have a body that has additional information (like POST) that GET does not have.

>>>Data Validation
# Pydantic is a powerful data validation and settings management library for Python, engineered to enhance the robustness and reliability of your codebase. From basic tasks, such as checking whether a variable is an integer, to more complex tasks, like ensuring highly-nested dictionary keys and values have the correct data types, Pydantic can handle just about any data validation scenario with minimal boilerplate code.




>>>Exception Handling



>>>>status code


>>>>Swagger Configuratio


>>>>Python Request Objects







































